#!/usr/bin/env babel-node --

import { graphql } from 'graphql'
import loadQueryStore from "../src/queryStore.js";
import urlLoader from "../src/browser";
import schema from "../src/schema";
import program from 'commander';
import { transports } from '../src/logger';

const scrape = async (urls) => {
  transports.console.level = 'error'
  const queryStore = await loadQueryStore(schema);
  const browser = await urlLoader
  const results = await Promise.all(urls.map(async url => {
    return await Promise.all(queryStore.map(async (query) => {
      const pattern = new RegExp(query.config.match.url);
      if (!pattern.test(url)) return;
      const page = await browser.load(url).then(page => page);

      const result = await graphql(schema, query.queryString, {}, {page: page}).then((result) => {
        return result
      })

      page.close();

      return {
        info: {
          query: query.queryName,
          url: url
        },
        data: result.data
      }
    }))
  }));
  console.log(JSON.stringify([].concat(...results)));
}

const list = (val) => {
  return val.split(",");
}

program
  .arguments('<urls>')
  .action(async (urls) => (await scrape(list(urls))))
  .parse(process.argv);
