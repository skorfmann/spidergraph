import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by @pongsatt/graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  node?: GQLNode;
  crawler?: GQLListing;
}

export interface GQLNode {
  id?: string;
  info?: GQLQueryInfo;
}

/** Use this to resolve interface type Node */
export type GQLPossibleNodeTypeNames =
'ApartmentForRent' |
'ApartmentForSale' |
'HouseForRent';

export interface GQLNodeNameMap {
  Node: GQLNode;
  ApartmentForRent: GQLApartmentForRent;
  ApartmentForSale: GQLApartmentForSale;
  HouseForRent: GQLHouseForRent;
}

export interface GQLQueryInfo {
  query?: string;
  url?: string;
}

export interface GQLListing {
  pagination?: GQLPagination;
  collection?: (GQLListItem | null)[];
}

export interface GQLPagination {
  next?: GQLUrl;
  previous?: GQLUrl;
  first?: GQLUrl;
  last?: GQLUrl;
  pages?: (GQLUrl | null)[];
  current?: GQLUrl;
}

export type GQLUrl = any;

export interface GQLListItem {
  title?: string;
  url?: GQLUrl;
}

export interface GQLSubscription {
  nodeAdded?: GQLNode;
}

export interface GQLPropertyFilter {
  maxPrice?: number;
  minPrice?: number;
  location?: GQLGeolocatableString;
  radius?: number;
}

export type GQLGeolocatableString = any;

export type GQLRegex = any;

export type GQLJSON = any;

export enum GQLCurrencyCode {
  EUR = 'EUR',
  USD = 'USD'
}

export interface GQLCurrency {
  value?: number;
  code: GQLCurrencyCode;
  symbol?: string;
  formatted?: string;
}

export interface GQLAddress {
  raw?: string;
  street?: string;
  city?: string;
  country?: string;
  latitude?: number;
  longitude?: number;
}

export interface GQLContactData {
  email?: string;
}

export interface GQLPhoto {
  title?: string;
  url?: string;
}

export interface GQLPhone {
  phone?: string;
  mobile?: string;
  fax?: string;
}

export interface GQLOnlineProfiles {
  email?: string;
  twitter?: string;
  facebook?: string;
  website?: string;
}

export interface GQLContact {
  name?: string;
  company?: string;
  address?: GQLAddress;
  phone?: string;
}

export interface GQLPropertyRent {
  utilities?: GQLCurrency;
  heatingCosts?: GQLCurrency;
  basePrice?: GQLCurrency;
  totalPrice?: GQLCurrency;
  deposit?: GQLCurrency;
  interval?: GQLRentInterval;
  minContractLength?: number;
  maxContractLength?: number;
  unlimitedContract?: boolean;
}

export enum GQLRentInterval {
  HOURLY = 'HOURLY',
  DAILY = 'DAILY',
  WEEKLY = 'WEEKLY',
  BIWEEKLY = 'BIWEEKLY',
  MONTHLY = 'MONTHLY',
  YEARLY = 'YEARLY'
}

export interface GQLPropertySale {
  price?: GQLCurrency;
  commonCharge?: GQLCurrency;
  parkingSpacePrice?: GQLCurrency;
  commission?: number;
}

export interface GQLImage {
  url?: string;
  caption?: string;
}

export interface GQLRealEstate {
  title?: string;
  description?: string;
  contact?: GQLContact;
  condition?: string;
  images?: (GQLImage | null)[];
  misc?: string;
  proximity?: string;
  equipment?: string;
}

/** Use this to resolve interface type RealEstate */
export type GQLPossibleRealEstateTypeNames =
'ApartmentForRent' |
'ApartmentForSale' |
'HouseForRent';

export interface GQLRealEstateNameMap {
  RealEstate: GQLRealEstate;
  ApartmentForRent: GQLApartmentForRent;
  ApartmentForSale: GQLApartmentForSale;
  HouseForRent: GQLHouseForRent;
}

export interface GQLApartment {
  buildYear?: string;
  rooms?: number;
  bedrooms?: number;
  bathrooms?: number;
  livingArea?: string;
  features?: (string | null)[];
  vacantFrom?: string;
  buildingType?: string;
}

/** Use this to resolve interface type Apartment */
export type GQLPossibleApartmentTypeNames =
'ApartmentForRent' |
'ApartmentForSale';

export interface GQLApartmentNameMap {
  Apartment: GQLApartment;
  ApartmentForRent: GQLApartmentForRent;
  ApartmentForSale: GQLApartmentForSale;
}

export interface GQLHouse {
  buildYear?: string;
  floors?: number;
  rooms?: number;
  bedrooms?: number;
  bathrooms?: number;
  livingArea?: string;
  usableArea?: string;
  plotSize?: string;
  parkingSpace?: string;
  features?: (string | null)[];
  vacantFrom?: string;
  buildingType?: string;
}

/** Use this to resolve interface type House */
export type GQLPossibleHouseTypeNames = 'HouseForRent';

export interface GQLHouseNameMap {
  House: GQLHouse;
  HouseForRent: GQLHouseForRent;
}

export interface GQLGeoLocation {
  address?: GQLAddress;
}

/** Use this to resolve interface type GeoLocation */
export type GQLPossibleGeoLocationTypeNames =
'ApartmentForRent' |
'ApartmentForSale' |
'HouseForRent';

export interface GQLGeoLocationNameMap {
  GeoLocation: GQLGeoLocation;
  ApartmentForRent: GQLApartmentForRent;
  ApartmentForSale: GQLApartmentForSale;
  HouseForRent: GQLHouseForRent;
}

export interface GQLRealEstateRent {
  rent?: GQLPropertyRent;
}

/** Use this to resolve interface type RealEstateRent */
export type GQLPossibleRealEstateRentTypeNames =
'ApartmentForRent' |
'HouseForRent';

export interface GQLRealEstateRentNameMap {
  RealEstateRent: GQLRealEstateRent;
  ApartmentForRent: GQLApartmentForRent;
  HouseForRent: GQLHouseForRent;
}

export interface GQLRealEstateSale {
  sale?: GQLPropertySale;
}

/** Use this to resolve interface type RealEstateSale */
export type GQLPossibleRealEstateSaleTypeNames = 'ApartmentForSale';

export interface GQLRealEstateSaleNameMap {
  RealEstateSale: GQLRealEstateSale;
  ApartmentForSale: GQLApartmentForSale;
}

export interface GQLApartmentForRent extends GQLNode, GQLGeoLocation, GQLRealEstate, GQLRealEstateRent, GQLApartment {
  id?: string;
  contact?: GQLContact;
  title?: string;
  description?: string;
  misc?: string;
  proximity?: string;
  equipment?: string;
  condition?: string;
  buildingType?: string;
  rent?: GQLPropertyRent;
  address?: GQLAddress;
  buildYear?: string;
  rooms?: number;
  bedrooms?: number;
  bathrooms?: number;
  livingArea?: string;
  features?: (string | null)[];
  vacantFrom?: string;
  images?: (GQLImage | null)[];
  info?: GQLQueryInfo;
}

export interface GQLApartmentForSale extends GQLNode, GQLGeoLocation, GQLRealEstate, GQLRealEstateSale, GQLApartment {
  id?: string;
  contact?: GQLContact;
  title?: string;
  description?: string;
  misc?: string;
  proximity?: string;
  equipment?: string;
  condition?: string;
  buildingType?: string;
  sale?: GQLPropertySale;
  address?: GQLAddress;
  buildYear?: string;
  rooms?: number;
  bedrooms?: number;
  bathrooms?: number;
  livingArea?: string;
  features?: (string | null)[];
  vacantFrom?: string;
  images?: (GQLImage | null)[];
  info?: GQLQueryInfo;
}

export interface GQLHouseForRent extends GQLNode, GQLGeoLocation, GQLRealEstate, GQLRealEstateRent, GQLHouse {
  id?: string;
  contact?: GQLContact;
  title?: string;
  description?: string;
  misc?: string;
  proximity?: string;
  equipment?: string;
  condition?: string;
  buildingType?: string;
  rent?: GQLPropertyRent;
  address?: GQLAddress;
  buildYear?: string;
  floors?: number;
  rooms?: number;
  bedrooms?: number;
  bathrooms?: number;
  livingArea?: string;
  usableArea?: string;
  plotSize?: string;
  parkingSpace?: string;
  features?: (string | null)[];
  vacantFrom?: string;
  images?: (GQLImage | null)[];
  info?: GQLQueryInfo;
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Node?: {
    __resolveType: GQLNodeTypeResolver
  };
  
  QueryInfo?: GQLQueryInfoTypeResolver;
  Listing?: GQLListingTypeResolver;
  Pagination?: GQLPaginationTypeResolver;
  Url?: GraphQLScalarType;
  ListItem?: GQLListItemTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
  GeolocatableString?: GraphQLScalarType;
  Regex?: GraphQLScalarType;
  JSON?: GraphQLScalarType;
  Currency?: GQLCurrencyTypeResolver;
  Address?: GQLAddressTypeResolver;
  ContactData?: GQLContactDataTypeResolver;
  Photo?: GQLPhotoTypeResolver;
  Phone?: GQLPhoneTypeResolver;
  OnlineProfiles?: GQLOnlineProfilesTypeResolver;
  Contact?: GQLContactTypeResolver;
  PropertyRent?: GQLPropertyRentTypeResolver;
  PropertySale?: GQLPropertySaleTypeResolver;
  Image?: GQLImageTypeResolver;
  RealEstate?: {
    __resolveType: GQLRealEstateTypeResolver
  };
  
  Apartment?: {
    __resolveType: GQLApartmentTypeResolver
  };
  
  House?: {
    __resolveType: GQLHouseTypeResolver
  };
  
  GeoLocation?: {
    __resolveType: GQLGeoLocationTypeResolver
  };
  
  RealEstateRent?: {
    __resolveType: GQLRealEstateRentTypeResolver
  };
  
  RealEstateSale?: {
    __resolveType: GQLRealEstateSaleTypeResolver
  };
  
  ApartmentForRent?: GQLApartmentForRentTypeResolver;
  ApartmentForSale?: GQLApartmentForSaleTypeResolver;
  HouseForRent?: GQLHouseForRentTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  node?: QueryToNodeResolver<TParent>;
  crawler?: QueryToCrawlerResolver<TParent>;
}

export interface QueryToNodeResolver<TParent = any, TResult = GQLNode|Promise<GQLNode>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCrawlerResolver<TParent = any, TResult = GQLListing|Promise<GQLListing>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNodeTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ApartmentForRent' | 'ApartmentForSale' | 'HouseForRent';
}
export interface GQLQueryInfoTypeResolver<TParent = any> {
  query?: QueryInfoToQueryResolver<TParent>;
  url?: QueryInfoToUrlResolver<TParent>;
}

export interface QueryInfoToQueryResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryInfoToUrlResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLListingTypeResolver<TParent = any> {
  pagination?: ListingToPaginationResolver<TParent>;
  collection?: ListingToCollectionResolver<TParent>;
}

export interface ListingToPaginationResolver<TParent = any, TResult = GQLPagination|Promise<GQLPagination>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListingToCollectionResolver<TParent = any, TResult = Array<GQLListItem>|Promise<Array<GQLListItem>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaginationTypeResolver<TParent = any> {
  next?: PaginationToNextResolver<TParent>;
  previous?: PaginationToPreviousResolver<TParent>;
  first?: PaginationToFirstResolver<TParent>;
  last?: PaginationToLastResolver<TParent>;
  pages?: PaginationToPagesResolver<TParent>;
  current?: PaginationToCurrentResolver<TParent>;
}

export interface PaginationToNextResolver<TParent = any, TResult = GQLUrl|Promise<GQLUrl>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToPreviousResolver<TParent = any, TResult = GQLUrl|Promise<GQLUrl>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToFirstResolver<TParent = any, TResult = GQLUrl|Promise<GQLUrl>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToLastResolver<TParent = any, TResult = GQLUrl|Promise<GQLUrl>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToPagesResolver<TParent = any, TResult = Array<GQLUrl>|Promise<Array<GQLUrl>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginationToCurrentResolver<TParent = any, TResult = GQLUrl|Promise<GQLUrl>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLListItemTypeResolver<TParent = any> {
  title?: ListItemToTitleResolver<TParent>;
  url?: ListItemToUrlResolver<TParent>;
}

export interface ListItemToTitleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ListItemToUrlResolver<TParent = any, TResult = GQLUrl|Promise<GQLUrl>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  nodeAdded?: SubscriptionToNodeAddedResolver<TParent>;
}

export interface SubscriptionToNodeAddedArgs {
  filter?: GQLPropertyFilter;
}
export interface SubscriptionToNodeAddedResolver<TParent = any, TResult = GQLNode|Promise<GQLNode>> {
  (parent: TParent, args: SubscriptionToNodeAddedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCurrencyTypeResolver<TParent = any> {
  value?: CurrencyToValueResolver<TParent>;
  code?: CurrencyToCodeResolver<TParent>;
  symbol?: CurrencyToSymbolResolver<TParent>;
  formatted?: CurrencyToFormattedResolver<TParent>;
}

export interface CurrencyToValueResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToCodeResolver<TParent = any, TResult = GQLCurrencyCode|Promise<GQLCurrencyCode>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToSymbolResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CurrencyToFormattedResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAddressTypeResolver<TParent = any> {
  raw?: AddressToRawResolver<TParent>;
  street?: AddressToStreetResolver<TParent>;
  city?: AddressToCityResolver<TParent>;
  country?: AddressToCountryResolver<TParent>;
  latitude?: AddressToLatitudeResolver<TParent>;
  longitude?: AddressToLongitudeResolver<TParent>;
}

export interface AddressToRawResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToStreetResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCityResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToCountryResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToLatitudeResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AddressToLongitudeResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContactDataTypeResolver<TParent = any> {
  email?: ContactDataToEmailResolver<TParent>;
}

export interface ContactDataToEmailResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPhotoTypeResolver<TParent = any> {
  title?: PhotoToTitleResolver<TParent>;
  url?: PhotoToUrlResolver<TParent>;
}

export interface PhotoToTitleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhotoToUrlResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPhoneTypeResolver<TParent = any> {
  phone?: PhoneToPhoneResolver<TParent>;
  mobile?: PhoneToMobileResolver<TParent>;
  fax?: PhoneToFaxResolver<TParent>;
}

export interface PhoneToPhoneResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhoneToMobileResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PhoneToFaxResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOnlineProfilesTypeResolver<TParent = any> {
  email?: OnlineProfilesToEmailResolver<TParent>;
  twitter?: OnlineProfilesToTwitterResolver<TParent>;
  facebook?: OnlineProfilesToFacebookResolver<TParent>;
  website?: OnlineProfilesToWebsiteResolver<TParent>;
}

export interface OnlineProfilesToEmailResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OnlineProfilesToTwitterResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OnlineProfilesToFacebookResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface OnlineProfilesToWebsiteResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLContactTypeResolver<TParent = any> {
  name?: ContactToNameResolver<TParent>;
  company?: ContactToCompanyResolver<TParent>;
  address?: ContactToAddressResolver<TParent>;
  phone?: ContactToPhoneResolver<TParent>;
}

export interface ContactToNameResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactToCompanyResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactToAddressResolver<TParent = any, TResult = GQLAddress|Promise<GQLAddress>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ContactToPhoneResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPropertyRentTypeResolver<TParent = any> {
  utilities?: PropertyRentToUtilitiesResolver<TParent>;
  heatingCosts?: PropertyRentToHeatingCostsResolver<TParent>;
  basePrice?: PropertyRentToBasePriceResolver<TParent>;
  totalPrice?: PropertyRentToTotalPriceResolver<TParent>;
  deposit?: PropertyRentToDepositResolver<TParent>;
  interval?: PropertyRentToIntervalResolver<TParent>;
  minContractLength?: PropertyRentToMinContractLengthResolver<TParent>;
  maxContractLength?: PropertyRentToMaxContractLengthResolver<TParent>;
  unlimitedContract?: PropertyRentToUnlimitedContractResolver<TParent>;
}

export interface PropertyRentToUtilitiesResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToHeatingCostsResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToBasePriceResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToTotalPriceResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToDepositResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToIntervalResolver<TParent = any, TResult = GQLRentInterval|Promise<GQLRentInterval>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToMinContractLengthResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToMaxContractLengthResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertyRentToUnlimitedContractResolver<TParent = any, TResult = boolean|Promise<boolean>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPropertySaleTypeResolver<TParent = any> {
  price?: PropertySaleToPriceResolver<TParent>;
  commonCharge?: PropertySaleToCommonChargeResolver<TParent>;
  parkingSpacePrice?: PropertySaleToParkingSpacePriceResolver<TParent>;
  commission?: PropertySaleToCommissionResolver<TParent>;
}

export interface PropertySaleToPriceResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertySaleToCommonChargeResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertySaleToParkingSpacePriceResolver<TParent = any, TResult = GQLCurrency|Promise<GQLCurrency>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PropertySaleToCommissionResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImageTypeResolver<TParent = any> {
  url?: ImageToUrlResolver<TParent>;
  caption?: ImageToCaptionResolver<TParent>;
}

export interface ImageToUrlResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToCaptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRealEstateTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ApartmentForRent' | 'ApartmentForSale' | 'HouseForRent';
}
export interface GQLApartmentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ApartmentForRent' | 'ApartmentForSale';
}
export interface GQLHouseTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'HouseForRent';
}
export interface GQLGeoLocationTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ApartmentForRent' | 'ApartmentForSale' | 'HouseForRent';
}
export interface GQLRealEstateRentTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ApartmentForRent' | 'HouseForRent';
}
export interface GQLRealEstateSaleTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ApartmentForSale';
}
export interface GQLApartmentForRentTypeResolver<TParent = any> {
  id?: ApartmentForRentToIdResolver<TParent>;
  contact?: ApartmentForRentToContactResolver<TParent>;
  title?: ApartmentForRentToTitleResolver<TParent>;
  description?: ApartmentForRentToDescriptionResolver<TParent>;
  misc?: ApartmentForRentToMiscResolver<TParent>;
  proximity?: ApartmentForRentToProximityResolver<TParent>;
  equipment?: ApartmentForRentToEquipmentResolver<TParent>;
  condition?: ApartmentForRentToConditionResolver<TParent>;
  buildingType?: ApartmentForRentToBuildingTypeResolver<TParent>;
  rent?: ApartmentForRentToRentResolver<TParent>;
  address?: ApartmentForRentToAddressResolver<TParent>;
  buildYear?: ApartmentForRentToBuildYearResolver<TParent>;
  rooms?: ApartmentForRentToRoomsResolver<TParent>;
  bedrooms?: ApartmentForRentToBedroomsResolver<TParent>;
  bathrooms?: ApartmentForRentToBathroomsResolver<TParent>;
  livingArea?: ApartmentForRentToLivingAreaResolver<TParent>;
  features?: ApartmentForRentToFeaturesResolver<TParent>;
  vacantFrom?: ApartmentForRentToVacantFromResolver<TParent>;
  images?: ApartmentForRentToImagesResolver<TParent>;
  info?: ApartmentForRentToInfoResolver<TParent>;
}

export interface ApartmentForRentToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToContactResolver<TParent = any, TResult = GQLContact|Promise<GQLContact>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToTitleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToDescriptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToMiscResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToProximityResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToEquipmentResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToConditionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToBuildingTypeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToRentResolver<TParent = any, TResult = GQLPropertyRent|Promise<GQLPropertyRent>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToAddressResolver<TParent = any, TResult = GQLAddress|Promise<GQLAddress>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToBuildYearResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToRoomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToBedroomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToBathroomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToLivingAreaResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToFeaturesResolver<TParent = any, TResult = Array<string>|Promise<Array<string>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToVacantFromResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToImagesResolver<TParent = any, TResult = Array<GQLImage>|Promise<Array<GQLImage>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForRentToInfoResolver<TParent = any, TResult = GQLQueryInfo|Promise<GQLQueryInfo>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApartmentForSaleTypeResolver<TParent = any> {
  id?: ApartmentForSaleToIdResolver<TParent>;
  contact?: ApartmentForSaleToContactResolver<TParent>;
  title?: ApartmentForSaleToTitleResolver<TParent>;
  description?: ApartmentForSaleToDescriptionResolver<TParent>;
  misc?: ApartmentForSaleToMiscResolver<TParent>;
  proximity?: ApartmentForSaleToProximityResolver<TParent>;
  equipment?: ApartmentForSaleToEquipmentResolver<TParent>;
  condition?: ApartmentForSaleToConditionResolver<TParent>;
  buildingType?: ApartmentForSaleToBuildingTypeResolver<TParent>;
  sale?: ApartmentForSaleToSaleResolver<TParent>;
  address?: ApartmentForSaleToAddressResolver<TParent>;
  buildYear?: ApartmentForSaleToBuildYearResolver<TParent>;
  rooms?: ApartmentForSaleToRoomsResolver<TParent>;
  bedrooms?: ApartmentForSaleToBedroomsResolver<TParent>;
  bathrooms?: ApartmentForSaleToBathroomsResolver<TParent>;
  livingArea?: ApartmentForSaleToLivingAreaResolver<TParent>;
  features?: ApartmentForSaleToFeaturesResolver<TParent>;
  vacantFrom?: ApartmentForSaleToVacantFromResolver<TParent>;
  images?: ApartmentForSaleToImagesResolver<TParent>;
  info?: ApartmentForSaleToInfoResolver<TParent>;
}

export interface ApartmentForSaleToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToContactResolver<TParent = any, TResult = GQLContact|Promise<GQLContact>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToTitleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToDescriptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToMiscResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToProximityResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToEquipmentResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToConditionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToBuildingTypeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToSaleResolver<TParent = any, TResult = GQLPropertySale|Promise<GQLPropertySale>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToAddressResolver<TParent = any, TResult = GQLAddress|Promise<GQLAddress>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToBuildYearResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToRoomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToBedroomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToBathroomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToLivingAreaResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToFeaturesResolver<TParent = any, TResult = Array<string>|Promise<Array<string>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToVacantFromResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToImagesResolver<TParent = any, TResult = Array<GQLImage>|Promise<Array<GQLImage>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApartmentForSaleToInfoResolver<TParent = any, TResult = GQLQueryInfo|Promise<GQLQueryInfo>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLHouseForRentTypeResolver<TParent = any> {
  id?: HouseForRentToIdResolver<TParent>;
  contact?: HouseForRentToContactResolver<TParent>;
  title?: HouseForRentToTitleResolver<TParent>;
  description?: HouseForRentToDescriptionResolver<TParent>;
  misc?: HouseForRentToMiscResolver<TParent>;
  proximity?: HouseForRentToProximityResolver<TParent>;
  equipment?: HouseForRentToEquipmentResolver<TParent>;
  condition?: HouseForRentToConditionResolver<TParent>;
  buildingType?: HouseForRentToBuildingTypeResolver<TParent>;
  rent?: HouseForRentToRentResolver<TParent>;
  address?: HouseForRentToAddressResolver<TParent>;
  buildYear?: HouseForRentToBuildYearResolver<TParent>;
  floors?: HouseForRentToFloorsResolver<TParent>;
  rooms?: HouseForRentToRoomsResolver<TParent>;
  bedrooms?: HouseForRentToBedroomsResolver<TParent>;
  bathrooms?: HouseForRentToBathroomsResolver<TParent>;
  livingArea?: HouseForRentToLivingAreaResolver<TParent>;
  usableArea?: HouseForRentToUsableAreaResolver<TParent>;
  plotSize?: HouseForRentToPlotSizeResolver<TParent>;
  parkingSpace?: HouseForRentToParkingSpaceResolver<TParent>;
  features?: HouseForRentToFeaturesResolver<TParent>;
  vacantFrom?: HouseForRentToVacantFromResolver<TParent>;
  images?: HouseForRentToImagesResolver<TParent>;
  info?: HouseForRentToInfoResolver<TParent>;
}

export interface HouseForRentToIdResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToContactResolver<TParent = any, TResult = GQLContact|Promise<GQLContact>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToTitleResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToDescriptionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToMiscResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToProximityResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToEquipmentResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToConditionResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToBuildingTypeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToRentResolver<TParent = any, TResult = GQLPropertyRent|Promise<GQLPropertyRent>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToAddressResolver<TParent = any, TResult = GQLAddress|Promise<GQLAddress>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToBuildYearResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToFloorsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToRoomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToBedroomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToBathroomsResolver<TParent = any, TResult = number|Promise<number>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToLivingAreaResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToUsableAreaResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToPlotSizeResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToParkingSpaceResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToFeaturesResolver<TParent = any, TResult = Array<string>|Promise<Array<string>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToVacantFromResolver<TParent = any, TResult = string|Promise<string>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToImagesResolver<TParent = any, TResult = Array<GQLImage>|Promise<Array<GQLImage>>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface HouseForRentToInfoResolver<TParent = any, TResult = GQLQueryInfo|Promise<GQLQueryInfo>> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
